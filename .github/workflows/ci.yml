name: CI/CD Pipeline

on:
    push:
        branches: [main, develop]
    pull_request:
        branches: [main, develop]

jobs:
    # Job 1: Code Quality & Linting
    lint:
        name: 🔍 Lint & Code Quality
        runs-on: ubuntu-latest

        steps:
            - name: 📥 Checkout code
              uses: actions/checkout@v4

            - name: 📦 Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: '20'
                  cache: 'npm'

            - name: 📚 Install dependencies
              run: npm ci

            - name: 🔍 Run ESLint
              run: npm run lint

            - name: 📝 Check TypeScript
              run: npm run type-check

    # Job 2: Testing
    test:
        name: 🧪 Run Tests
        runs-on: ubuntu-latest

        strategy:
            matrix:
                node-version: [18, 20]

        steps:
            - name: 📥 Checkout code
              uses: actions/checkout@v4

            - name: 📦 Setup Node.js ${{ matrix.node-version }}
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ matrix.node-version }}
                  cache: 'npm'

            - name: 📚 Install dependencies
              run: npm ci

            - name: 🧪 Run tests
              run: npm test

            - name: 📊 Generate coverage report
              run: npm run coverage

            - name: 📈 Upload coverage to Codecov
              if: matrix.node-version == 20
              uses: codecov/codecov-action@v3
              with:
                  token: ${{ secrets.CODECOV_TOKEN }}
                  files: ./coverage/lcov.info
                  fail_ci_if_error: false

    # Job 3: Build Check
    build:
        name: 🏗️ Build Check
        runs-on: ubuntu-latest

        steps:
            - name: 📥 Checkout code
              uses: actions/checkout@v4

            - name: 📦 Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: '20'
                  cache: 'npm'

            - name: 📚 Install dependencies
              run: npm ci

            - name: 🏗️ Build project
              run: npm run build

            - name: 📦 Upload build artifacts
              uses: actions/upload-artifact@v4
              with:
                  name: build-files
                  path: dist/
                  retention-days: 7

    # Job 4: Security Audit
    security:
        name: 🔒 Security Audit
        runs-on: ubuntu-latest

        steps:
            - name: 📥 Checkout code
              uses: actions/checkout@v4

            - name: 📦 Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: '20'
                  cache: 'npm'

            - name: 🔒 Run security audit
              run: npm audit --audit-level=moderate

            - name: 🛡️ Run Snyk to check for vulnerabilities
              uses: snyk/actions/node@master
              continue-on-error: true
              env:
                  SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
              with:
                  args: --severity-threshold=high

    # Job 5: Dependency Review (only on PRs)
    dependency-review:
        name: 📋 Dependency Review
        runs-on: ubuntu-latest
        if: github.event_name == 'pull_request'

        steps:
            - name: 📥 Checkout code
              uses: actions/checkout@v4

            - name: 📋 Dependency Review
              uses: actions/dependency-review-action@v3
              with:
                  fail-on-severity: moderate

    # Job 6: Performance Check
    performance:
        name: ⚡ Performance Check
        runs-on: ubuntu-latest
        if: github.event_name == 'pull_request'

        steps:
            - name: 📥 Checkout code
              uses: actions/checkout@v4

            - name: 📦 Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: '20'
                  cache: 'npm'

            - name: 📚 Install dependencies
              run: npm ci

            - name: 🏗️ Build project
              run: npm run build

            - name: ⚡ Bundle size check
              run: |
                  echo "## Bundle Size Report 📦" >> $GITHUB_STEP_SUMMARY
                  echo "| File | Size |" >> $GITHUB_STEP_SUMMARY
                  echo "|------|------|" >> $GITHUB_STEP_SUMMARY
                  find dist -name "*.js" -exec ls -lh {} \; | awk '{print "| " $9 " | " $5 " |"}' >> $GITHUB_STEP_SUMMARY

    # Job 7: Code Coverage Gate
    coverage-gate:
        name: 📊 Coverage Gate
        runs-on: ubuntu-latest
        needs: test

        steps:
            - name: 📥 Checkout code
              uses: actions/checkout@v4

            - name: 📦 Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: '20'
                  cache: 'npm'

            - name: 📚 Install dependencies
              run: npm ci

            - name: 📊 Check coverage threshold
              run: |
                  npm run coverage
                  # Add coverage threshold check here if needed
                  echo "Coverage check completed ✅"

    # Job 8: E2E Tests (optional, if you add them later)
    e2e:
        name: 🎭 E2E Tests
        runs-on: ubuntu-latest
        if: false # Disabled until E2E tests are implemented

        steps:
            - name: 📥 Checkout code
              uses: actions/checkout@v4

            - name: 📦 Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: '20'
                  cache: 'npm'

            - name: 📚 Install dependencies
              run: npm ci

            - name: 🎭 Run Playwright tests
              run: npx playwright test

    # Job 9: All Checks Complete
    all-checks:
        name: ✅ All Checks Complete
        runs-on: ubuntu-latest
        needs: [lint, test, build, security, coverage-gate]
        if: always()

        steps:
            - name: ✅ Mark as successful
              if: needs.lint.result == 'success' && needs.test.result == 'success' && needs.build.result == 'success' && needs.security.result == 'success' && needs.coverage-gate.result == 'success'
              run: |
                  echo "🎉 All checks passed successfully!"
                  echo "✅ Lint: ${{ needs.lint.result }}"
                  echo "✅ Test: ${{ needs.test.result }}"
                  echo "✅ Build: ${{ needs.build.result }}"
                  echo "✅ Security: ${{ needs.security.result }}"
                  echo "✅ Coverage: ${{ needs.coverage-gate.result }}"

            - name: ❌ Mark as failed
              if: needs.lint.result != 'success' || needs.test.result != 'success' || needs.build.result != 'success' || needs.security.result != 'success' || needs.coverage-gate.result != 'success'
              run: |
                  echo "❌ Some checks failed!"
                  echo "Lint: ${{ needs.lint.result }}"
                  echo "Test: ${{ needs.test.result }}"
                  echo "Build: ${{ needs.build.result }}"
                  echo "Security: ${{ needs.security.result }}"
                  echo "Coverage: ${{ needs.coverage-gate.result }}"
                  exit 1
